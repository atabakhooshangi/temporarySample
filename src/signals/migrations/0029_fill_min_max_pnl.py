# Generated by Django 3.2 on 2023-09-17 14:43

from django.db import migrations

from core.choice_field_types import StatusChoice
from signals.models.signal import CustomTradingSignalManager
from signals.pnl import SignalPnLCalculator


def close_signal_possible_pnl(signals, signal_object):
    for signal in signals:
        signal_tree = list()
        if signal.state in [StatusChoice.CLOSE, StatusChoice.START,
                            StatusChoice.DELETED] and signal.min_pnl_percentage is None:
            try:
                while signal.state != StatusChoice.PUBLISH:
                    signal_tree.append(signal)
                    signal = signal_object.custom_objects.get(child_id=signal.id)
            except signal_object.DoesNotExist:

                pass

            SignalPnLCalculator(signal,
                                signal.exchange_market.quote_currency,
                                signal.exchange_market.base_currency).possible_pnl_calculator()

            min_pnl_percentage = signal.min_pnl_percentage
            max_pnl_percentage = signal.max_pnl_percentage

            for node in signal_tree:
                node.min_pnl_percentage = min_pnl_percentage
                node.max_pnl_percentage = max_pnl_percentage

            signal_object.custom_objects.bulk_update(signal_tree, fields=['min_pnl_percentage', 'max_pnl_percentage'])


class Migration(migrations.Migration):

    def forwards_func(apps, schema_editor):
        trading_signal = apps.get_model("signals", "TradingSignal")
        manager = CustomTradingSignalManager()
        manager.model = trading_signal
        BATCH_SIZE = 1000
        publish_signals = manager.filter(state__in=[StatusChoice.PUBLISH])
        for signal in publish_signals:
            SignalPnLCalculator(signal,
                                signal.exchange_market.quote_currency,
                                signal.exchange_market.base_currency).possible_pnl_calculator()
        other_signals_count = manager.exclude(
            state__in=[StatusChoice.PUBLISH, StatusChoice.TEST, StatusChoice.DRAFT]).count()
        for offset in range(0, other_signals_count, BATCH_SIZE):
            other_signal = manager.exclude(
                state__in=[StatusChoice.PUBLISH, StatusChoice.TEST, StatusChoice.DRAFT])[offset:offset + BATCH_SIZE]
            close_signal_possible_pnl(other_signal)

    dependencies = [
        ('signals', '0028_auto_20230917_1443'),
    ]

    operations = [
        migrations.RunPython(code=forwards_func, reverse_code=migrations.RunPython.noop)
    ]
