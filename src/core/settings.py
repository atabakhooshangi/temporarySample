"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import json
import os
import sys
from datetime import datetime
from distutils.util import strtobool
from pathlib import Path

import requests
from django.utils.translation import gettext_lazy as _
from dotenv import load_dotenv


def env_to_boolean(value):
    try:
        return bool(strtobool(value))
    except ValueError:
        return value
    except AttributeError:
        return value


load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BASE_URL = os.environ["BASE_URL"]
BASE_INTERNAL_URL = os.environ["BASE_INTERNAL_URL"]
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_to_boolean(os.environ["DEBUG"])
# NOTE: Pass allowed host as comma seperated in env file
ALLOWED_HOSTS = os.environ["ALLOWED_HOSTS"].split(",")
CSRF_TRUSTED_ORIGINS = ['https://*.exmartiz.com', 'https://*.exwino.com', 'https://*.127.0.0.1',
                        'http://*.192.168.100.116', "http://*.192.168.100.103"]

# Application definition
INSTALLED_APPS = [
    # "django_nose",
    # "silk",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "drf_yasg",
    "import_export",
    "rest_framework",
    "django_filters",
    "django_extensions",
    "debug_toolbar",
    "corsheaders",
    "adminsortable2",
    "user",
    "services",
    "signals",
    "copytrading",
    "media",
    "core",
    "campaign",
    "invitation"
]

# # Use nose to run all tests
# TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'
#
# # Tell nose to measure coverage on the 'foo' and 'bar' apps
# NOSE_ARGS = [
#     '--with-coverage',
#     '--cover-package=signals,services',
# ]


AUTH_USER_MODEL = "user.User"

CORS_ALLOWED_ORIGINS = (
    'http://localhost:8000',
    "http://192.168.100.103:8000",
    "http://192.168.100.116:8000"
)
CORS_ALLOW_METHODS = (
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
)

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'X-Device-Token'
)

MIDDLEWARE = [
    # "debug_toolbar.middleware.DebugToolbarMiddleware",  # NOTE: do not turn this on, on production!!!!
    "core.middleware.disable_clientside_cache_middleware.DisableClientSideCachingMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    # "silk.middleware.SilkyMiddleware",
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ['POSTGRES_ENGINE'],
        'NAME': os.environ['POSTGRES_DB'],
        'USER': os.environ['POSTGRES_USER'],
        'PASSWORD': os.environ['POSTGRES_PASSWORD'],
        'HOST': os.environ['DB_SERVICE'],
        'PORT': os.environ['POSTGRES_PORT'],
        'CONN_MAX_AGE': None,  # Set to None for persistent connections, might cause errors
        'DISABLE_SERVER_SIDE_CURSORS': True,
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LOCALE_PATHS = [os.path.join(BASE_DIR, "locale")]
# LOCALE_PATHS = [os.path.join(os.path.dirname(BASE_DIR), "src/static/locale")]
LANGUAGE_CODE = 'fa'

LANGUAGES = [
    ('fa', _("Persian")),
    ('en', _('English')),
]
TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), "src/static")
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Rest framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "core.authentication.UserJWTAuthentication",
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}

# Caching settings(redis based)
CELERY_REDIS_URL = os.environ["CELERY_REDIS_URL"]
CACHE_REDIS_URL = os.environ["CACHE_REDIS_URL"]

# Redis ##############################################
SOCIAL_REDIS_HOST = os.environ.get('SOCIAL_REDIS_HOST', 'localhost')
SOCIAL_REDIS_PORT = os.environ.get('SOCIAL_REDIS_PORT', '6379')
POSITION_TRACKER_REDIS_INDEX = os.environ["POSITION_TRACKER_REDIS_INDEX"]
SOCIAL_DATA_REDIS_INDEX = os.environ["SOCIAL_DATA_REDIS_INDEX"]

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{SOCIAL_REDIS_HOST}:{SOCIAL_REDIS_PORT}",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "position_tracker_cache": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{SOCIAL_REDIS_HOST}:{SOCIAL_REDIS_PORT}/{POSITION_TRACKER_REDIS_INDEX}",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "data_cache": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{SOCIAL_REDIS_HOST}:{SOCIAL_REDIS_PORT}/{SOCIAL_DATA_REDIS_INDEX}",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "REDIS_CLIENT_KWARGS": {"decode_responses": True},
        },
    }
}

# Celery and CeleryBeat
CELERY_BROKER_URL = f"redis://{SOCIAL_REDIS_HOST}:{SOCIAL_REDIS_PORT}"
CELERY_RESULT_BACKEND = f"redis://{SOCIAL_REDIS_HOST}:{SOCIAL_REDIS_PORT}"
CELERY_ENABLE_UTC = True

# Minio configs
MINIO_EXACT_URL = os.environ["MINIO_EXACT_URL"]
MINIO_END_POINT = os.environ["MINIO_END_POINT"]
MINIO_ACCESS_KEY = os.environ["MINIO_ACCESS_KEY"]
MINIO_SECRET_KEY = os.environ["MINIO_SECRET_KEY"]
MINIO_IS_SECURE = env_to_boolean(os.environ["MINIO_IS_SECURE"])

# JWT authentication properties
JWT_ENCRYPTION_ALGORITHM = os.environ["JWT_ENCRYPTION_ALGORITHM"]
USER_RSA_PUBLIC_KEY = os.environ["USER_RSA_PUBLIC_KEY"]
ADMIN_RSA_PUBlIC_KEY = os.environ["ADMIN_RSA_PUBLIC_KEY"]

# IAM url and grpc
API_V1_STR = os.environ["API_V1_STR"]
IAM_URL = os.environ["IAM_URL"]
IAM_GRPC_URL = os.environ["IAM_GRPC_URL"]

ACCOUNTING_URL = os.environ["ACCOUNTING_URL"]
ACCOUNTING_CREATE_SOCIAL_TRANSACTION_ENDPOINT = os.environ.get(
    "ACCOUNTING_CREATE_SOCIAL_TRANSACTION_ENDPOINT", "/social/transactions/"
)
ACCOUNTING_DECREASE_WALLET_BALANCE_ENDPOINT = os.environ.get(
    "ACCOUNTING_DECREASE_WALLET_BALANCE_ENDPOINT", "/wallet/absolute_wallet_decrement/"
)
ACCOUNTING_API_KEY = os.environ.get("ACCOUNTING_API_KEY")

PRODUCER_MANAGEMENT_URL = os.environ["PRODUCER_MANAGEMENT_URL"]
PRODUCER_END_POINT_URL = os.environ.get("PRODUCER_END_POINT_URL", "producer")
SOCIAL_API_KEY = os.environ["SOCIAL_API_KEY"]

# Swagger configuration(drf yasg)
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    'PERSIST_AUTH': True
}

PAGE_SIZE = os.environ['PAGE_SIZE']
APPEND_SLASH = True
PROJECT_NAME = os.environ["PROJECT_NAME"]

if not os.path.exists(BASE_DIR / 'logs'):
    os.mkdir(BASE_DIR / 'logs')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue'
        },
    },
    'formatters': {
        'file_formatter': {
            'format': ('Timestamp: %(asctime)s -- '
                       'Module: %(module)s -- '
                       'Name: %(name)s -- '
                       'Line: %(lineno)d -- '
                       'Level: %(levelname)s\n'
                       'Message: %(message)s'),
            'datefmt': '%Y-%m-%d %H:%M:%S %Z'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            # 'filters': ['require_debug_true'],
        },
        'request_file_handler': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'social.log'),
            'formatter': 'file_formatter',
        },
        'bug_tracker_file_handler': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'bug_tracker.log'),
            'formatter': 'file_formatter',
        },
        'django_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
        },
    },
    'loggers': {
        'django': {  # django default logger for exceptions and requests
            'handlers': ['django_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'request_logger': {
            'handlers': ['request_file_handler', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'exception_logger': {
            'handlers': ['request_file_handler', 'console'],
            'level': 'WARNING',
            'propagate': True,
        },
        'bug_tracker_logger': {
            'handlers': ['bug_tracker_file_handler', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
# FOR THE SAKE OF DEBUGTOOLBAR
INTERNAL_IPS = [
    "127.0.0.1",
]
# TODO: Might be add to console
SUBSCRIPTION_DURATION = int(os.environ["SUBSCRIPTION_DURATION"])  # days
TRIAL_SUBSCRIPTION_DURATION = int(os.environ["TRIAL_SUBSCRIPTION_DURATION"])  # days
PLATFORM_DEFAULT_FEE = int(os.environ["PLATFORM_DEFAULT_FEE"])  # percentage
PLATFORM_BEGINING_DATE = datetime.strptime(
    os.environ["PLATFORM_BEGINING_DATE"],
    '%Y-%m-%d'
).date()

ZIBAL_MERCHANT_ID = os.environ["ZIBAL_MERCHANT_ID"]
ZIBAL_BASE_URL = os.environ["ZIBAL_BASE_URL"]
ZIBAL_PAYMENT_BASE_URL = os.environ["ZIBAL_PAYMENT_BASE_URL"]

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240  # higher than the count of fields

CCXT_SANDBOX_MODE = env_to_boolean(os.environ["CCXT_SANDBOX_MODE"])

DEFAULT_COPY_MARGIN = os.environ["DEFAULT_COPY_MARGIN"]

# Email config #######################################
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ['EMAIL_HOST']
EMAIL_USE_TLS = env_to_boolean(os.environ["EMAIL_USE_TLS"])
EMAIL_PORT = int(os.environ['EMAIL_PORT'])
EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']

SET_SANDBOX_MODE = env_to_boolean(os.environ['SET_SANDBOX_MODE'])
CONFIG_SERVER_BASE_URL = os.environ['CONFIG_SERVER_BASE_URL']
CONSOLE_KEY = os.environ['CONSOLE_KEY']

MAX_DIGIT = 13
DECIMAL_PLACE = 2

TEST_RUNNER = 'core.test_utils.TestRunner'
TESTING = 0

if len(sys.argv) >= 2 and sys.argv[1] == 'test':
    print("RUUNING TESTS")
    TESTING = 1

CONSOLE_SETTINGS_REDIS_KEY = 'setting'

GRAPH_MODELS = {
    'all_applications': True,
    'graph_models': True,
}
INVITER_FEE = os.environ.get('INVITER_FEE', 5)
REFERRAL_DISCOUNT_TYPE = os.environ.get("REFERRAL_DISCOUNT_TYPE")  # this could be: percentage_discount, fixed_discount
REFERRAL_DISCOUNT_AMOUNT = os.environ.get("REFERRAL_DISCOUNT_AMOUNT")  # this should be a number
REFERRAL_DISCOUNT_EXPIRE_DAYS = os.environ.get("REFERRAL_DISCOUNT_EXPIRE_DAYS")  # this should be a number

EXPAY_BASE_URL = os.environ.get("EXPAY_BASE_URL")
CRYPTO_GATEWAY_LOCK_OFFSET = int(os.environ.get("CRYPTO_GATEWAY_LOCK_OFFSET"))  # in minutes
EXPAY_MERCHANT_KEY = os.environ.get("EXPAY_MERCHANT_KEY")
EXPAY_PAYMENT_URL = os.environ.get("EXPAY_PAYMENT_URL")
ADDITIONAL_FEE_FOR_USDT_PRICE = int(os.environ.get("ADDITIONAL_FEE_FOR_USDT_PRICE"))

# HOW TO RUN WITH CPROFILER!! make profile_dir and then run: ./manage.py runprofileserver --use-cprofile --prof-path=profile_dir
# HOW TO VISUALIZE: for example: snakeviz profile_dir/api.services.003658ms.1698840594.prof


# SILKY_PYTHON_PROFILER = True
